= Dupe 

There are lots of great tools out there to ease the burden of prototyping ActiveRecord objects while cuking your application (e.g., thoughtbot's {"Factory Girl"}[http://www.thoughtbot.com/projects/factory_girl]).
But what about prototyping ActiveResource records? That's where Dupe steps in.  


== Motivation 

Dupe is ideally suited for cuking the client side of a service-oriented (ActiveResource) application where the backend service does not yet exist.

Why would anyone want to do that, you might ask? Dupe arose in the midst of a site migration project. Essentially, the site being replaced 
had a complicated, denormalized, and chaotic backend datastore that made ordinary data migration a complex nightmare. So the developers involved
decided to rebuild the frontend of the site first, and connect it to the existing backend via services. 

Using Dupe, they were able to cuke the new frontend, mocking
the backend services they needed, and then the developers for the old site were able to use the mocked XML output of Dupe to determine exactly what
services they needed to expose on the backend (along with the XML format of those services). Once those services existed, the new frontend was launched,
and the developers then created a new backend, migrated data from the old backend (over the services), and connected the new frontend to the new backend services.
The resulting site had a nicely decoupled, service-oriented architecture. 


== Installation

Add this to your cucumber.rb environment (config/environments/cucumber.rb)
  
  config.gem 'dupe', :lib => 'dupe', :version => '>=0.3.5' :source => 'http://gemcutter.org'

Then run this rake task to install the gem: 

  # rake gems:install RAILS_ENV=cucumber

Lastly, from your rails project root, run:

  # script/generate dupe


== Example

Let's suppose your cuking a book search application for a library that consumes a RESTFUL book datastore service via ActiveResource.
You might start by writing the following feature in <em>RAILS_ROOT/features/library/find_book.feature</em>:

  Feature: find a book
    As a reader
    I want to search for books
    so that I can check them out and read them. 

  Scenario: search by author
    Given an author "Arthur C. Clarke"
    And a book "2001: A Space Odyssey" by "Arthur C. Clarke"
    When I search for "Arthur C. Clarke"
    I should see "2001: A Space Odyssey"

To get this to pass, you might first create ActiveResource[http://api.rubyonrails.org/classes/ActiveResource/Base.html] models for Books and Authors that connect to the Library service:

  class Book < ActiveResource::Base
    self.site = 'http://bookservice.domain'
  end

  class Author < ActiveResource::Base
    self.site = 'http://bookservice.domain'
  end

Then you might create the following resource definition via Dupe.define (put it in a file with a .rb extension and place it in RAILS_ROOT/features/support/):
  
  Dupe.define :book do |book|
    book.author do |author_name|
      Dupe.find(:author) {|a| a.name == author_name}
    end
  end

and the following cucumber step definitions (utilizing Dupe.create):
  
  Given /^an author "([^\"]*)"$/ do |author|
    Dupe.create :author, :name => author
  end

  Given /^a book "([^\"]*)" by "([^\"]*)"$/ do |book, author|
    Dupe.create :book, :title => book, :author => author 
  end

Dupe.create will in turn mock two service responses for each resource. For example,
for the Book resource, it will mock:

  # Book.find(:all) --> GET /books.xml
  <?xml version="1.0" encoding="UTF-8"?>
  <books type="array">
    <book>
      <id type="integer">1</id>
      <title>2001: A Space Odyssey</title>
      <author>
        <id type="integer">1</id>
        <name>Arthur C. Clarke</name>
      </author>
    </book>
  </books>

  # Book.find(1) --> GET /books/1.xml
  <?xml version="1.0" encoding="UTF-8"?>
  <book>
    <id type="integer">1</id>
    <title>2001: A Space Odyssey</title>
    <author>
      <id type="integer">1</id>
      <name>Arthur C. Clarke</name>
    </author>
  </book>

From here, you could start scaffolding your controllers, with the assumption that Dupe will mock the responses to Book.find(<id or :all>) and Author.find(<id or :all>).

However, what happens when one of your controllers uses an ActiveResource object in such a way that it sends off a request that Dupe has not yet mocked? For example, suppose 
you had the following in one of your controllers:

  Book.find :all, :params => {:author_id => 1}

This would send off a request like "/books.xml?author_id=1". If this happened during the context of a cucumber scenario, then Dupe would throw an exception with a message like:

  There is no custom service mapping for "/books.xml?author_id=1". 
  Now go to features/support/custom_mocks.rb and add it. (StandardError)

When you ran "script/generate dupe" during dupe installation, it created a file features/support/custom_mocks.rb that should look something like this:

  module CustomMocks
    # Maps a service request url to a Dupe find. By default, Dupe will only 
    # mock simple requests like SomeResource.find(some_id) or SomeResource.find(:all)
    #
    # For example, suppose you have a Book < ActiveResource::Base class, and 
    # somewhere your code does: 
    #
    #   Book.find :all, :params => {:limit => 10, :offset => 20}
    #
    # That in turn will send off a request to a url like: 
    #
    #   /books?limit=10&offset=20
    #
    # In this file, you could add a "when" statement like:
    #
    #   when %r{^/books?limit=\d+&offset=\d+$}
    #     start = $2.to_i
    #     finish = start + $1.to_i
    #     Dupe.find(:books)[start..finish]
    #
    def custom_service(url)
      case url
        
        when %r{/bogus_url}
          ''

        else
          raise StandardError.new(
            "There is no custom service mapping for \"#{url}\"." +
            "Now go to features/support/custom_mocks.rb and add it."
          )
      end
    end
  end

Now remove the "when %r{/bogus_url}" statement and add a custom mock for your service:

    def custom_service(url)
      case url

        when %r{books.xml\?author_id=(\d+)$}
          Dupe.find(:books) {|b| b.author.id == $1}

        else
          raise StandardError.new(
            "There is no custom service mapping for \"#{url}\"." +
            "Now go to features/support/custom_mocks.rb and add it."
          )

      end
    end

Dupe will take the result of the Dupe.find(:books)... code (a Hash), and convert it to XML. 
You could have alternatively given a string of XML (or a string of anything), and Dupe would have taken it as-is. 


== More

Dupe supports attribute defaults, attribute transformations, stubbing, resource associations, custom resource mocks, and more. 
Want to learn more? Consult the API documentation at http://moonmaster9000.github.com/dupe/api/


== TODO List

* Thus far, Dupe has only been used for consuming a service via GET requests. There are no facilities yet for mocking responses to PUT, POST, and DELETE requests. 
* We need a rake task that will run your scenarios and create service documentation based on the dupe log output (i.e., example requests and example responses) that the programmers implementing the service can use as a reference. 
